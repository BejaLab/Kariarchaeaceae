from os import listdir, path
from pandas import read_excel
import yaml
import warnings
from math import ceil

rhodopsin_sets ,= glob_wildcards("rhodopsins/{rhodopsin_set}.faa")

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    metadata = read_excel("metadata/genomes.xlsx")
    rhodopsins = read_excel("metadata/rhodopsins.xlsx")

species = "Kariarchaeum pelagium"
genus = species.split()[0]

nonred_all = metadata[metadata['redundant'].isna()]
nonred_bins = nonred_all[nonred_all['is_not_bin'].isna()]

all_genomes = nonred_all['genome'].tolist()
species_genomes = nonred_bins[nonred_bins['classification'].str.contains(species)]['genome'].tolist()
other_genomes = nonred_bins[~nonred_bins['classification'].str.contains(species)]['genome'].tolist()
scaffold_to_pplace = nonred_all[~nonred_all['is_not_bin'].isna()].iloc[0]['genome']

logan_sra ,= glob_wildcards("databases/logan/marine_metagenome/{sra}.contigs.fa.zst")

configfile: "metadata/config.yaml"
include: "Pangenome.snakefile"
include: "Species_phylogeny.snakefile"

rule all:
    input:
        "output/species.svg",
        "output/map.svg",
        "output/map_pfam.svg"

rule copy_genome:
    input:
        "genomes/{genome}.fna"
    output:
        "analysis/genomes/{genome}.fna"
    shell:
        "cp {input} {output}"

rule faidx:
    input:
        "{prefix}"
    output:
        "{prefix}.fai"
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit faidx {input}"

rule makeblast_prot:
    input:
        "{prefix}.faa"
    output:
        "{prefix}.faa.pdb"
    conda:
        "envs/blast.yaml"
    shell:
        "makeblastdb -in {input} -dbtype prot"

rule makeblast_nucl:
    input:
        "{prefix}.fna"
    output:
        "{prefix}.fna.ndb"
    conda:
        "envs/blast.yaml"
    shell:
        "makeblastdb -in {input} -dbtype nucl"

rule rhodopsins_cat:
    input:
        expand("rhodopsins/{rhodopsin_set}.faa", rhodopsin_set = rhodopsin_sets)
    output:
        "analysis/rhodopsins/proteins.faa"
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit grep -vsrp XXX -o {output} {input}"

rule residues:
    input:
        "analysis/rhodopsins/mafft.faa"
    output:
        "analysis/rhodopsins/residues.txt"
    params:
        residues = config['residues']
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/residues.py"

rule rhodopsins_mafft:
    input:
        "analysis/rhodopsins/proteins.faa"
    output:
        "analysis/rhodopsins/mafft.faa"
    conda:
        "envs/phylophlan.yaml"
    shell:
        "cat {input} | mafft --auto --reorder - > {output}"

rule rhodopsins_trimal:
    input:
        "analysis/rhodopsins/mafft.faa"
    output:
        "analysis/rhodopsins/trimal.faa"
    params:
        gt = 0.9
    conda:
        "envs/phylophlan.yaml"
    shell:
        "trimal -gt {params.gt} -in {input} -out {output}"

rule rhodopsins_raxml:
    input:
        "analysis/rhodopsins/trimal.faa"
    output:
        "analysis/rhodopsins/RAxML_info.txt",
        "analysis/rhodopsins/RAxML_bipartitions.txt",
        "analysis/rhodopsins/RAxML_bestTree.txt"
    params:
        model = "PROTGAMMAAUTO",
        seed = 123,
        bootstrap = 1000
    conda:
        "envs/phylophlan.yaml"
    threads:
        20
    shell:
        "raxmlHPC-PTHREADS-SSE3 -f a -p {params.seed} -x {params.seed} -# {params.bootstrap} -m {params.model} -T {threads} -s {input} -n txt -w $(dirname $(realpath {output}))"
        # "raxmlHPC-PTHREADS-SSE3 -p {params.seed} -m {params.model} -T {threads} -s {input} -n txt -w $(dirname $(realpath {output}))"

rule rhodopsins_plot:
    input:
        # newick = "analysis/rhodopsins/RAxML_bipartitions.txt",
        metadata = "metadata/rhodopsins.xlsx"
    output:
        plot = "output/rhodopsins.svg",
        jtree = "output/rhodopsins.jtree"
    conda:
        "envs/r.yaml"
    script:
        "scripts/plot_protein_tree.R"

# not available from conda
rule splitstree_run:
    input:
        fasta = "analysis/rhodopsins/trimal.faa",
        nexus = "metadata/splitstree.nex"
    output:
        "analysis/rhodopsins/splitstree.nex"
    shell:
        "xvfb-run -a SplitsTreeCMD -x 'IMPORT FILE={input.fasta} DATATYPE=PROTEIN; EXECUTE FILE={input.nexus}; UPDATE; SAVE FILE={output}; QUIT;'"

rule plot_rhodopsins:
    input:
        residues = "analysis/rhodopsins/residues.txt",
        # tree = "analysis/rhodopsins/RAxML_bipartitions.txt",
        network = "analysis/rhodopsins/splitstree.nex",
        metadata = "metadata/rhodopsins.xlsx"
    output:
        "output/rhodopsin_network.svg"
    conda:
        "envs/r.yaml"
    script:
        "scripts/plot_protein_network.R"

rule cluster_rhodopsins:
    input:
        "analysis/rhodopsins/proteins.faa"
    output:
        "analysis/rhodopsins/proteins.cdhit"
    params:
        c = 0.9
    conda:
        "envs/cd-hit.yaml"
    shell:
        "cd-hit -c {params.c} -d 0 -i {input} -o {output}"

rule tblastn_fna:
    input:
        query = "analysis/rhodopsins/proteins.cdhit",
        ndb = "databases/fna/{database}.ndb"
    output:
        "analysis/tblastn/{database}.txt"
    params:
        db = "databases/fna/{database}",
        evalue = 1e-5
    conda:
        "envs/blast.yaml"
    threads:
        40
    shell:
        "tblastn -query {input.query} -db {params.db} -outfmt 6 -out {output} -max_target_seqs 1000000000 -num_threads {threads} -evalue {params.evalue}"

rule blastp_database:
    input:
        query = "rhodopsins/{family}.faa",
        pdb = "databases/faa/{database}.pdb"
    output:
        "analysis/blastp/{database}-{family}.txt"
    params:
        db = "databases/faa/{database}",
        evalue = 1e-10,
        cols = [ 'qseqid', 'sseqid', 'pident', 'length', 'qlen', 'slen', 'qseq', 'sseq', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'stitle' ]
    conda:
        "envs/blast.yaml"
    threads:
        20
    shell:
        "blastp -query {input.query} -db {params.db} -outfmt '6 {params.cols}' -out {output} -max_target_seqs 1000000000 -num_threads {threads} -evalue {params.evalue}"

rule blastp_gtdb:
    input:
        query = "rhodopsins/{family}.faa",
        pdb = "analysis/rhodopsin_cds/GTDB/coding.faa.pdb"
    output:
        "analysis/blastp/GTDB-{family}.txt"
    params:
        db = "analysis/rhodopsin_cds/GTDB/coding.faa",
        evalue = 1e-10,
        cols = [ 'qseqid', 'sseqid', 'pident', 'length', 'qlen', 'slen', 'qseq', 'sseq', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'stitle' ]
    conda:
        "envs/blast.yaml"
    threads:
        20
    shell:
        "blastp -query {input.query} -db {params.db} -outfmt '6 {params.cols}' -out {output} -max_target_seqs 1000000000 -num_threads {threads} -evalue {params.evalue}"

rule cat_genomes:
    input:
        expand("analysis/genomes/{genome}.faa", genome = all_genomes)
    output:
        "analysis/genomes/all_genomes.faa"
    shell:
        "cat {input} > {output}"

rule blastp_genomes:
    input:
        query = "rhodopsins/{family}.faa",
        pdb = "analysis/genomes/all_genomes.faa.pdb"
    output:
        "analysis/blastp/all_genomes-{family}.txt"
    params:
        db = "analysis/genomes/all_genomes.faa",
        evalue = 1e-10,
        cols = [ 'qseqid', 'sseqid', 'pident', 'length', 'qlen', 'slen', 'qseq', 'sseq', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'stitle' ]
    conda:
        "envs/blast.yaml"
    threads:
        20
    shell:
        "blastp -query {input.query} -db {params.db} -outfmt '6 {params.cols}' -out {output} -max_target_seqs 1000000000 -num_threads {threads} -evalue {params.evalue}"

rule blastp_faa:
    input:
        "analysis/blastp/{database}_merged.csv"
    output:
        "analysis/blastp/{database}_merged.faa"
    conda:
        "envs/kits.yaml"
    shell:
        "csvcut -c sseqid,stitle,sseq {input} | csvformat -T | sed 1d | sed 's/\\t/ /' | seqkit tab2fx | seqkit seq -g -o {output}"

rule easy_taxonomy:
    input:
        db_tax = "analysis/rhodopsin_cds/GTDB/coding_taxonomy",
        db = "analysis/rhodopsin_cds/GTDB/coding",
        query = "analysis/blastp/{database}_merged.faa"
    output:
        "analysis/blastp/{database}_merged_lca.tsv"
    params:
        lca_mode = 4,
        prefix = "analysis/blastp/{database}_merged"
    conda:
        "envs/kits.yaml"
    threads:
        32
    shell:
        "mmseqs easy-taxonomy {input.query} {input.db} {params.prefix} tmp --lca-mode {params.lca_mode} --tax-lineage 1 --threads {threads}"

rule all_clades_csv:
    input:
        expand("analysis/blastp/{database}_clades.csv", database = [ 'JGI_IMG_unrestricted.faa', 'OM-RGC_v2_orfs.faa', 'all_genomes', 'GTDB' ])

rule subclades_poseidoniia:
    input:
        expand("analysis/blastp/{database}-{{clade}}.faa", database = [ 'JGI_IMG_unrestricted.faa', 'OM-RGC_v2_orfs.faa', 'GTDB' ])
    output:
        "analysis/subclades/poseidoniia-{clade}/sequences.fasta"
    params:
        m = 210
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit seq -m {params.m} -o {output} {input}"

rule subclades_heidallR:
    input:
        expand("analysis/blastp/{database}-{clade}.faa", database = [ 'all_genomes', 'JGI_IMG_unrestricted.faa', 'OM-RGC_v2_orfs.faa' ], clade = [ 'HeimdallR' ])
    output:
        "analysis/subclades/kariarchaeum-heimdallR/sequences.fasta"
    params:
        m = 210
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit seq -m {params.m} {input} | seqkit rmdup -s -o {output}"

rule subclades_poseidoniia_cdhit:
    input:
        "analysis/subclades/poseidoniia-{clade}/sequences.fasta"
    output:
        "analysis/subclades/poseidoniia-{clade}/cdhit.fasta"
    params:
        c = 0.9
    conda:
        "envs/cd-hit.yaml"
    shell:
        "cd-hit -i {input} -o {output} -c {params.c} -d 0"

rule subclades_kariarchaeum_cdhit:
    input:
        "analysis/subclades/kariarchaeum-heimdallR/sequences.fasta"
    output:
        "analysis/subclades/kariarchaeum-heimdallR/cdhit.fasta"
    params:
        c = 1.0
    conda:
        "envs/cd-hit.yaml"
    shell:
        "cd-hit -i {input} -o {output} -c {params.c} -d 0"

rule subclades_mafft:
    input:
        "analysis/subclades/{taxon}-{clade}/cdhit.fasta"
    output:
        "analysis/subclades/{taxon}-{clade}/mafft.fasta"
    conda:
        "envs/phylophlan.yaml"
    shell:
        "mafft --reorder --auto {input} > {output}"

rule blastp_merge_hits:
    input:
        outfmt6 = expand("analysis/blastp/{{database}}-{family}.txt", family = rhodopsin_sets),
        metadata = "metadata/rhodopsins.xlsx"
    output:
        "analysis/blastp/{database}_merged.csv"
    params:
        cols = [ 'qseqid', 'sseqid', 'pident', 'length', 'qlen', 'slen', 'qseq', 'sseq', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'stitle' ],
        id = 50,
        score = 90,
        clades = [ 'HeimdallR', 'ACA', 'ACB' ]
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/extract_hits.py"

rule blastp_filter_taxa:
    input:
        csv = "analysis/blastp/{database}_merged.csv",
        lca = "analysis/blastp/{database}_merged_lca.tsv"
    output:
        "analysis/blastp/{database}_clades.csv"
    params:
        taxon = "d_Archaea"
    conda:
        "envs/kits.yaml"
    shell:
        "grep {params.taxon} {input.lca} | cut -f1 | csvgrep -c sseqid -f- {input.csv} > {output}"

rule blastp_clade_faa:
    input:
        "analysis/blastp/{database}_clades.csv"
    output:
        "analysis/blastp/{database}-{family}.faa"
    params:
        clade = lambda w: { 'HeimdallR': 'HeimdallR', 'ACB': 'ACB', 'ACA': 'PR' }[w.family],
        subclade = lambda w: { 'HeimdallR': '', 'ACB': '', 'ACA': 'ACA' }[w.family]
    conda:
        "envs/kits.yaml"
    shell:
        "csvgrep -c clade -m '{params.clade}' {input} | csvgrep -c subclade -m '{params.subclade}' | csvcut -c sseqid,stitle,sseq | csvformat -T | sed 1d | sed 's/\\t/ /' | seqkit tab2fx | seqkit seq -g -o {output}"

rule dload_map:
    output:
        "analysis/maps/land/ne_110m_land.shp"
    params:
        url = "https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/physical/ne_110m_land.zip"
    shadow:
        "minimal"
    shell:
        "wget -O tmp.zip '{params.url}' && unzip tmp.zip -d $(dirname {output})"

rule om_rgc_profiles_PF01036:
    input:
        clades = "analysis/hmmsearch/OM-RGC_v2_orfs.faa-PF01036.csv",
        profile_metaG = "databases/faa/OM-RGC_v2_gene_profile_metaG.tsv",
        profile_metaT = "databases/faa/OM-RGC_v2_gene_profile_metaT.tsv",
        metadata = "databases/faa/Salazar_et_al_2019_Suppl_Info.xlsx"
    output:
        profiles = "analysis/profiles/OM-RGC_v2_orfs_PF01036_profiles.csv",
        matches = "analysis/profiles/OM-RGC_v2_orfs_PF01036_matches.csv",
        samples = "analysis/profiles/OM-RGC_v2_orfs_PF01036_samples.csv"
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/om_rgc_profiles.py"

rule jgi_img_profiles_PF01036:
    input:
        clades = "analysis/hmmsearch/JGI_IMG_unrestricted.faa-PF01036.csv",
        profile = "databases/faa/JGI_IMG_unrestricted.gene_info.txt"
    output:
        profiles = "analysis/profiles/JGI_IMG_unrestricted_PF01036_profiles.csv",
        matches = "analysis/profiles/JGI_IMG_unrestricted_PF01036_matches.csv",
        samples = "analysis/profiles/JGI_IMG_unrestricted_PF01036_samples.csv"
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/jgi_img_profiles.py"

rule om_rgc_profiles:
    input:
        clades = "analysis/blastp/OM-RGC_v2_orfs.faa_clades.csv",
        profile_metaG = "databases/faa/OM-RGC_v2_gene_profile_metaG.tsv",
        profile_metaT = "databases/faa/OM-RGC_v2_gene_profile_metaT.tsv",
        metadata = "databases/faa/Salazar_et_al_2019_Suppl_Info.xlsx"
    output:
        profiles = "analysis/profiles/OM-RGC_v2_orfs_profiles.csv",
        matches = "analysis/profiles/OM-RGC_v2_orfs_matches.csv",
        samples = "analysis/profiles/OM-RGC_v2_orfs_samples.csv"
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/om_rgc_profiles.py"

rule jgi_img_profiles:
    input:
        clades = "analysis/blastp/JGI_IMG_unrestricted.faa_clades.csv",
        profile = "databases/faa/JGI_IMG_unrestricted.gene_info.txt"
    output:
        profiles = "analysis/profiles/JGI_IMG_unrestricted_profiles.csv",
        matches = "analysis/profiles/JGI_IMG_unrestricted_matches.csv",
        samples = "analysis/profiles/JGI_IMG_unrestricted_samples.csv"
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/jgi_img_profiles.py"

rule plot_map_clades:
    input:
        genomes = "metadata/genomes.xlsx",
        shape = "analysis/maps/land/ne_110m_land.shp",
        jgi_img_profiles = "analysis/profiles/JGI_IMG_unrestricted_profiles.csv",
        jgi_img_matches = "analysis/profiles/JGI_IMG_unrestricted_matches.csv",
        jgi_img_samples = "analysis/profiles/JGI_IMG_unrestricted_samples.csv",
        om_rgc_profiles = "analysis/profiles/OM-RGC_v2_orfs_profiles.csv",
        om_rgc_matches = "analysis/profiles/OM-RGC_v2_orfs_matches.csv",
        om_rgc_samples = "analysis/profiles/OM-RGC_v2_orfs_samples.csv"
    output:
        plot = "output/map.svg",
        all_profiles = "output/map_all_profiles.csv",
        om_rgc = "output/map_om_rgc.csv",
        jgi_img = "output/map_jgi_img.csv"
    params:
        clade = "HeimdallR",
        max_depth = 200,
        size_breaks = list(range(5, 21, 5))
    conda:
        "envs/r-map.yaml"
    script:
        "scripts/plot_map.R"

rule plot_map_pfam:
    input:
        genomes = "metadata/genomes.xlsx",
        shape = "analysis/maps/land/ne_110m_land.shp",
        jgi_img_profiles = [ "analysis/profiles/JGI_IMG_unrestricted_profiles.csv", "analysis/profiles/JGI_IMG_unrestricted_PF01036_profiles.csv" ],
        jgi_img_matches = [ "analysis/profiles/JGI_IMG_unrestricted_matches.csv", "analysis/profiles/JGI_IMG_unrestricted_PF01036_matches.csv" ],
        jgi_img_samples = [ "analysis/profiles/JGI_IMG_unrestricted_samples.csv", "analysis/profiles/JGI_IMG_unrestricted_PF01036_samples.csv" ],
        om_rgc_profiles = [ "analysis/profiles/OM-RGC_v2_orfs_profiles.csv", "analysis/profiles/OM-RGC_v2_orfs_PF01036_profiles.csv" ],
        om_rgc_matches = [ "analysis/profiles/OM-RGC_v2_orfs_matches.csv", "analysis/profiles/OM-RGC_v2_orfs_PF01036_matches.csv" ],
        om_rgc_samples = [ "analysis/profiles/OM-RGC_v2_orfs_samples.csv", "analysis/profiles/OM-RGC_v2_orfs_PF01036_samples.csv" ]
    output:
        plot = "output/map_pfam.svg",
        all_profiles = "output/map_all_profiles_pfam.csv",
        om_rgc = "output/map_om_rgc_pfam.csv",
        jgi_img = "output/map_jgi_img_pfam.csv"
    params:
        clade = "HeimdallR",
        total_clade = "Bac_rhodopsin",
        max_depth = 200,
        size_breaks = [ 0.05, 0.1, 0.2, 0.4 ]
    conda:
        "envs/r-map.yaml"
    script:
        "scripts/plot_map.R"

rule tblastn_filter_hits:
    input:
        outfmt6 = "analysis/tblastn/{database}.txt",
        metadata = "metadata/rhodopsins.xlsx"
    output:
        "analysis/tblastn/{database}.csv"
    params:
        id = 40,
        length = 180,
        evalue = 1e-10
    conda:
        "envs/pandas.yaml"
    script:
        "scripts/extract_hits.py"

rule ref_genomes_cat:
    input:
        expand("genomes/{genome}.fna", genome = species_genomes),
        "metadata/pplacer.fna"
    output:
        "analysis/ref_genomes/genomes.fna"
    shell:
        "cat {input} > {output}"

rule ref_genomes_makeblastdb:
    input:
        "analysis/ref_genomes/genomes.fna"
    output:
        "analysis/ref_genomes/genomes.fna.ndb"
    conda:
        "envs/blast.yaml"
    shell:
        "makeblastdb -in {input} -dbtype nucl"

rule ref_genomes_tblastn:
    input:
        query = "rhodopsins/HeimdallR.faa",
        ndb = "analysis/ref_genomes/genomes.fna.ndb",
        db = "analysis/ref_genomes/genomes.fna"
    output:
        "analysis/tblastn/ref_genomes.txt"
    params:
        cols = [ 'qseqid', 'sseqid', 'pident', 'length', 'qlen', 'slen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'sseq', 'stitle' ],
        evalue = 1e-30
    conda:
        "envs/blast.yaml"
    shell:
        "tblastn -query {input.query} -db {input.db} -out {output} -outfmt '6 {params.cols}' -evalue {params.evalue}"

rule link_gtdb_coding:
    input:
        "databases/rhodopsins/GTDB_coding.fna"
    output:
        "analysis/rhodopsin_cds/GTDB/coding.fna"
    shell:
        "cp {input} {output}"

rule gtdb_coding_translate:
    input:
        "analysis/rhodopsin_cds/GTDB/coding.fna"
    output:
        "analysis/rhodopsin_cds/GTDB/coding.faa"
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit seq -g {input} | seqkit translate -o {output}"

rule gtdb_coding_tax:
    input:
        "analysis/rhodopsin_cds/GTDB/coding.fna"
    output:
        nodes = "analysis/rhodopsin_cds/GTDB/nodes.dmp",
        names = "analysis/rhodopsin_cds/GTDB/names.dmp",
        mapping = "analysis/rhodopsin_cds/GTDB/mapping",
        merged = "analysis/rhodopsin_cds/GTDB/merged.dmp",
        delnodes = "analysis/rhodopsin_cds/GTDB/delnodes.dmp"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/gtdb_tax.py"

rule gtdb_codon_createdb:
    input:
        "analysis/rhodopsin_cds/GTDB/coding.faa"
    output:
        "analysis/rhodopsin_cds/GTDB/coding"
    conda:
        "envs/mmseqs2.yaml"
    shell:
        "mmseqs createdb {input} {output}"

rule gtdb_codon_createtaxdb:
    input:
        db = "analysis/rhodopsin_cds/GTDB/coding",
        nodes = "analysis/rhodopsin_cds/GTDB/nodes.dmp",
        names = "analysis/rhodopsin_cds/GTDB/names.dmp",
        mapping = "analysis/rhodopsin_cds/GTDB/mapping",
        merged = "analysis/rhodopsin_cds/GTDB/merged.dmp",
        delnodes = "analysis/rhodopsin_cds/GTDB/delnodes.dmp"
    output:
        "analysis/rhodopsin_cds/GTDB/coding_taxonomy"
    conda:
        "envs/mmseqs2.yaml"
    shell:
        "mmseqs createtaxdb {input.db} tmp --ncbi-tax-dump $(dirname {input.nodes}) --tax-mapping-file {input.mapping}"

rule tblastn_gtdb:
    input:
        query = "rhodopsins/{clade}.faa",
        ndb = "databases/gtdb/gtdb_genomes_reps_r214.fna.ndb"
    output:
        "analysis/tblastn/gtdb_{clade}.txt"
    params:
        db = "databases/gtdb/gtdb_genomes_reps_r214.fna",
        cols = [ 'qseqid', 'sseqid', 'pident', 'length', 'qlen', 'slen', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'stitle' ],
        max_seq = 1000,
        evalue = 1e-5
    conda:
        "envs/blast.yaml"
    threads:
        40
    shell:
        "tblastn -query {input.query} -db {params.db} -out {output} -outfmt '6 {params.cols}' -num_threads {threads} -max_target_seqs {params.max_seq} -evalue {params.evalue}"

rule tblastn_gtdb_entries:
    input:
        tblastn = "analysis/tblastn/gtdb_{clade}.txt",
        ndb = "databases/gtdb/gtdb_genomes_reps_r214.fna.ndb"
    output:
        "analysis/tblastn/gtdb_{clade}.fna"
    params:
        db = "databases/gtdb/gtdb_genomes_reps_r214.fna"
    conda:
        "envs/blast.yaml"
    shell:
        "cut -f2 {input.tblastn} | sort -u | blastdbcmd -entry_batch - -db {params.db} > {output}"

rule gtdb_matches:
    input:
        blastp = "analysis/blastp/GTDB-{clade}.txt",
        fasta = "analysis/rhodopsin_cds/GTDB/coding.faa",
        ref = "rhodopsins/{clade}.faa"
    output:
        "analysis/recomb/GTDB-{clade}.faa"
    params:
        evalue_col = 13,
        sseqid_col = 2,
        evalue = 1e-20
    conda:
        "envs/kits.yaml"
    shell:
        "awk '${params.evalue_col}<{params.evalue}' {input.blastp} | cut -f{params.sseqid_col} | seqkit grep -f- {input.fasta} | cat {input.ref} - | seqkit rmdup | seqkit rmdup -s -o {output}"

rule gtdb_combine_matches:
    input:
        expand("analysis/recomb/GTDB-{clade}.faa", clade = [ "HeimdallR", "ACA", "ACB" ])
    output:
        "analysis/recomb/GTDB_combined.faa"
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit rmdup -o {output} {input}"

rule gtdb_matches_cdhit:
    input:
        "analysis/recomb/GTDB_combined.faa"
    output:
        fasta = "analysis/recomb/GTDB_combined.cdhit",
        clstr = "analysis/recomb/GTDB_combined.cdhit.clstr"
    params:
        c = 0.9,
        n = 2
    conda:
        "envs/cd-hit.yaml"
    threads:
        10
    shell:
        "cd-hit -i {input} -o {output.fasta} -c {params.c} -n {params.n} -d 0 -T {threads}"

rule gtdb_cluster_reps:
    input:
        refs = expand("rhodopsins/{clade}.faa", clade = [ "HeimdallR", "ACA", "ACB" ]),
        clstr = "analysis/recomb/GTDB_combined.cdhit.clstr",
        fasta = "analysis/recomb/GTDB_combined.faa"
    output:
        "analysis/recomb/GTDB_combined_reps.faa"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/cluster_reps.py"

rule gtdb_heimdallr_matches_select:
    input:
        # additional = "analysis/recomb/recomb-additional.faa",
        matches = "analysis/recomb/GTDB-HeimdallR.fna",
        clstr = "analysis/recomb/GTDB-HeimdallR.cdhit.clstr",
        blast = "analysis/blastp/GTDB-HeimdallR.txt"
    output:
        "analysis/recomb/GTDB-HeimdallR-selected.fna"
    params:
        max_ident = 50,
        cols = [ 'qseqid', 'sseqid', 'pident', 'length', 'qlen', 'slen', 'qseq', 'sseq', 'qstart', 'qend', 'sstart', 'send', 'evalue', 'bitscore', 'stitle' ]
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/select_matches.py"

rule gtdb_heimdallr_matches_translate:
    input:
        "analysis/recomb/GTDB-HeimdallR-selected.fna"
    output:
        "analysis/recomb/GTDB-HeimdallR-selected.faa"
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit translate -o {output} {input}"

rule recomb_rhodopsin_sets:
    input:
        "rhodopsins/{rhodopsin_set}.faa"
    output:
        "analysis/recomb/{rhodopsin_set}.cdhit"
    params:
        c = 0.9,
        n = 3
    conda:
        "envs/cd-hit.yaml"
    shell:
        "cd-hit -i {input} -o {output} -c {params.c} -n {params.n} -d 0"

rule recomb_all_sequences:
    input:
        expand("analysis/recomb/{rhodopsin_set}.cdhit", rhodopsin_set = rhodopsin_sets),
        "analysis/recomb/GTDB-HeimdallR.cdhit"
    output:
        "analysis/recomb/all_sequences.faa"
    shell:
        "cat {input} > {output}"

rule recomb_cdhit:
    input:
        "analysis/recomb/all_sequences.faa"
    output:
        "analysis/recomb/all_sequences.cdhit"
    params:
        c = 0.99
    conda:
        "envs/cd-hit.yaml"
    shell:
        "cd-hit -i {input} -o {output} -c {params.c} -d 0"

rule recomb_mafft:
    input:
        "analysis/recomb/GTDB_combined_reps.faa"
    output:
        "analysis/recomb/GTDB_combined_reps.mafft"
    conda:
        "envs/phylophlan.yaml"
    threads:
        10
    shell:
        "mafft --thread {threads} --auto --reorder {input} > {output}"

rule recomb_backtrans:
    input:
        fna = "analysis/recomb/GTDB-HeimdallR-selected.fna",
        aln = "analysis/recomb/GTDB-HeimdallR-selected.mafft"
    output:
        "analysis/recomb/GTDB-HeimdallR-selected.mafft.fna"
    conda:
        "envs/phylophlan.yaml"
    shell:
        "trimal -backtrans {input.fna} -in {input.aln} -out {output} -splitbystopcodon"

rule recomb_trim:
    input:
        "analysis/recomb/GTDB_combined_reps.mafft"
    output:
        txt = "analysis/recomb/GTDB_combined_reps_trimmed_all.txt",
        fas = "analysis/recomb/GTDB_combined_reps_trimmed_all.faa"
    params:
        gt = 0.4
    conda:
        "envs/phylophlan.yaml"
    shell:
        "trimal -gt {params.gt} -in {input} -colnumbering -out {output.fas} > {output.txt}"

rule recomb_drop_short:
    input:
        "analysis/recomb/GTDB_combined_reps_trimmed_all.faa"
    output:
        "analysis/recomb/GTDB_combined_reps_trimmed.faa"
    params:
        m = 200
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit seq -nigm {params.m} {input} | seqkit grep -f- {input} > {output}"

rule trim_cds_aln:
    input:
        fasta = "analysis/recomb/all_sequences.mafft",
        trimal = "analysis/recomb/all_sequences.mafft.trimmed.txt"
    output:
        "analysis/recomb/all_sequences.trimmed_ends.fna"
    conda:
        "envs/biopython.yaml"
    script:
        "scripts/trim_aln.py"

rule gard_hyphy:
    input:
        "analysis/recomb/GTDB-HeimdallR-selected.trimmed.faa"
    output:
        best_gard = "analysis/recomb/gard/best-gard",
        fit_bf = "analysis/recomb/gard/best-gard.fit.bf",
        json = "analysis/recomb/gard/GARD.json"
    params:
        max_breakpoints = 5,
        rate_classes = 3,
        rv = "GDD",
        type = "amino-acid"
    threads:
        20
    log:
        "analysis/recomb/gard/gard.log"
    shadow:
        "minimal"
    conda:
        "envs/hyphy.yaml"
    shell:
        """
        hyphy GARD --mode Faster --type {params.type} --rv {params.rv} --rate-classes {params.rate_classes} --max-breakpoints {params.max_breakpoints} --alignment {input} CPU={threads} &> {log}
        mv {input}.best-gard {output.best_gard}
        mv {input}.best-gard.fit.bf {output.fit_bf}
        mv {input}.GARD.json {output.json}
        """

rule geneconv:
    input:
        "analysis/recomb/GTDB_combined_reps_trimmed.faa"
    output:
        "analysis/recomb/GTDB_combined_reps_geneconv.frags"
    params:
        seed = 123,
        prefix = "analysis/recomb/GTDB_combined_reps_trimmed"
    shadow:
        "minimal"
    log:
        "analysis/recomb/GTDB_combined_reps_geneconv.frags.log"
    shell:
        """
        geneconv {input} -nolog -Seed={params.seed} -Gscale=1 -WideCols &> {log}
        mv {params.prefix}.frags {output}
        """

rule pfam_dload:
    output:
        "analysis/pfam/{profile}.hmm"
    params:
        url = "https://www.ebi.ac.uk/interpro/wwwapi/entry/pfam/{profile}?annotation=hmm"
    shell:
        "wget -O- {params.url} | gzip -cd > {output}"

rule pfam_hmmsearch:
    input:
        hmm = "analysis/pfam/{profile}.hmm",
        pdb = "databases/faa/{database}.pdb"
    output:
        "analysis/hmmsearch/{database}-{profile}.txt"
    params:
        db = "databases/faa/{database}",
    conda:
        "envs/hmmer.yaml"
    threads:
        4
    shell:
        "blastdbcmd -db {params.db} -entry all | hmmsearch --cut_ga -o {output} --cpu {threads} {input.hmm} -"

rule pfam_csv:
    input:
        "analysis/hmmsearch/{database}-{profile}.txt"
    output:
        "analysis/hmmsearch/{database}-{profile}.csv"
    conda:
        "envs/bioformats.yaml"
    script:
        "scripts/hmmsearch_to_csv.py"

rule fasta_dict:
    input:
        "{prefix}.fna"
    output:
        "{prefix}.dict"
    conda:
        "envs/gatk.yaml"
    shell:
        "gatk CreateSequenceDictionary -R {input} -O {output}"

rule bam_index:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.bam.bai"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools index {input}"
