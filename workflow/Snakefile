from os import listdir, path
from pandas import read_excel, read_csv
import yaml
import warnings
from math import ceil

rhodopsin_sets ,= glob_wildcards("rhodopsins/{rhodopsin_set}.faa")

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    metadata = read_excel("metadata/genomes.xlsx")
    rhodopsins = read_excel("metadata/rhodopsins.xlsx")

species = "Kariarchaeum pelagium"
genus = species.split()[0]

nonred_all = metadata[metadata['redundant'].isna()]
nonred_bins = nonred_all[nonred_all['is_not_bin'].isna()]

all_genomes = nonred_all['genome'].tolist()
species_genomes = nonred_bins[nonred_bins['classification'].str.contains(species)]['genome'].tolist()
other_genomes = nonred_bins[~nonred_bins['classification'].str.contains(species)]['genome'].tolist()
scaffold_to_pplace = nonred_all[~nonred_all['is_not_bin'].isna()].iloc[0]['genome']

logan_sra ,= glob_wildcards("databases/logan/marine_metagenome/{sra}.contigs.fa.zst")
logan_metadata = read_csv("databases/logan/marine_metagenome.csv")
logan_sra_mg = logan_metadata.query("LibraryStrategy == 'WGS' and LibrarySource == 'METAGENOMIC' and LibrarySelection == 'RANDOM' and Run in @logan_sra")['Run'].to_list()

configfile: "metadata/config.yaml"
include: "Pangenome.snakefile"
include: "Species_phylogeny.snakefile"
include: "Proteins.snakefile"
include: "Profiling.snakefile"

rule all:
    input:
        "output/species.svg",
        "output/map.svg",
        "output/map_pfam.svg"

rule copy_genome:
    input:
        "genomes/{genome}.fna"
    output:
        "analysis/genomes/{genome}.fna"
    shell:
        "cp {input} {output}"

rule faidx:
    input:
        "{prefix}"
    output:
        "{prefix}.fai"
    conda:
        "envs/kits.yaml"
    shell:
        "seqkit faidx {input}"

rule makeblast_prot:
    input:
        "{prefix}.faa"
    output:
        "{prefix}.faa.pdb"
    conda:
        "envs/blast.yaml"
    shell:
        "makeblastdb -in {input} -dbtype prot"

rule makeblast_nucl:
    input:
        "{prefix}.fna"
    output:
        "{prefix}.fna.ndb"
    conda:
        "envs/blast.yaml"
    shell:
        "makeblastdb -in {input} -dbtype nucl"

rule cat_genomes:
    input:
        expand("analysis/genomes/{genome}.faa", genome = all_genomes)
    output:
        "analysis/genomes/all_genomes.faa"
    shell:
        "cat {input} > {output}"

rule fasta_dict:
    input:
        "{prefix}.fna"
    output:
        "{prefix}.dict"
    conda:
        "envs/gatk.yaml"
    shell:
        "gatk CreateSequenceDictionary -R {input} -O {output}"

rule bam_index:
    input:
        "{prefix}.bam"
    output:
        "{prefix}.bam.bai"
    conda:
        "envs/samtools.yaml"
    shell:
        "samtools index {input}"

rule fai_bed:
    input:
        "{prefix}.fai"
    output:
        "{prefix}.fai.bed"
    shell:
        "awk '{{print$1,1,$2}}' OFS=\\\\t {input} > {output}"
